datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Course {
  ENG
  SOFTWARE
  AEROSPACE
  ENERGY
  AUTOMOTIVE
  ELETRONIC
}

enum Status {
  PENDING
  APPROVED
}

model Season {
  id       String          @id @default(uuid())
  name     String
  period   String
  students SeasonStudent[]

  @@map("season")
}

model SeasonStudent {
  id        String  @id @default(uuid())
  seasonId  String
  studentId String
  points    Int
  student   Student @relation(fields: [studentId], references: [id])
  season    Season  @relation(fields: [seasonId], references: [id])

  @@map("season_student")
}

model Student {
  id                 String          @id @default(uuid())
  registration       String          @unique
  course             Course
  status             Status          @default(PENDING)
  name               String
  email              String          @unique
  avatar             String
  avatarUrl          String
  rankingParticipant Boolean
  password           String
  seasons            SeasonStudent[]
  questions          Question[]
  chatMessages       ChatMessages[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("students")
}

enum QuestionStatus {
  OPEN
  IN_PROGRESS
  FINISHED
}

enum QuestionUrgency {
  LOW
  MEDIUM
  HIGH
}

enum QuestionDifficulty {
  EASY
  MEDIUM
  HARD
}

model Question {
  id          String             @id @default(uuid())
  subjectId   String
  studentId   String
  tutorId     String
  title       String
  description String
  points      Int
  status      QuestionStatus
  difficulty  QuestionDifficulty
  urgency     QuestionUrgency
  tutors      Json[]
  student     Student            @relation(fields: [studentId], references: [id])
  chatRooms   ChatRooms[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("questions")
}

model Subject {
  id             String @id @default(uuid())
  code           String @unique
  name           String
  departmentCode String

  @@map("subjects")
}

model EmailTemplates {
  type    String @id @unique
  from    String
  subject String
  content String

  @@map("email_templates")
}

model ChatMessages {
  id       String     @id @default(uuid())
  chatId   String
  senderId String
  message  String
  chatRoom ChatRooms? @relation(fields: [chatId], references: [id])
  sender   Student    @relation(fields: [senderId], references: [id])

  @@map("chat_messages")
}

model ChatRooms {
  id         String @id @default(uuid())
  studentId  String
  questionId String
  tutorId    String
  status     String

  messages ChatMessages[]
  question Question       @relation(fields: [questionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("chat_rooms")
}
